#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<iterator>
#include<map>
#include<set>
#include<string>
#include<cstring>
#include<cstdio>
#include<stack>
#include<queue>
#include<math.h>
#include <utility>
#include <sstream> 
#include<bitset>
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;

typedef long long ll;
typedef std::vector<ll> vi;

#define PI acos(-1)
#define E 2.718281828459

std::bitset<2250> bs; // 10^7 + small extra bits should be enough for most prime-related problems
std::vector<ll> primes; // compact list of primes in form of vector<int>
void sieve(ll upperbound) { // create list of primes in [0 .. upperbound]
          int sieve_size = upperbound + 1; // add 1 to include upperbound
           bs.reset(); bs.flip(); // set all numbers to 1
            bs.set(0, false); bs.set(1, false); // except index 0 and 1
          for (ll i = 2; i <= sieve_size; i++) if (bs.test((size_t)i)) {
// cross out multiples of i starting from i * i! 
          for (ll j = i * i; j <= sieve_size; j += i) bs.set((size_t)j, false);
           primes.push_back((int)i);
    }
} 
vi primeFactors(ll N) {
      vi factors;          // vi "primes" (generated by sieve) is optional
      ll PF_idx = 0, PF = primes[PF_idx]; // using PF = 2, 3, 4, ..., is also ok.
      while ((PF * PF <= N)) { // stop at sqrt(N), but N can get smaller
        while (N % PF == 0) { 
		N /= PF; factors.push_back(PF); } // remove this PF
            PF = primes[++PF_idx]; // only consider primes!
            }
          if (N != 1) factors.push_back(N); // special case if N is actually a prime
      return factors;
}
int gcd(int a, int b)
{ 
       return (b == 0 ? a : gcd(b, a % b)); 
}
int main(int argc, char** argv) {
	//freopen("c.txt","w",stdout);
	int t;
	cin>>t;
	int I=1,x;
	while(t--)
	{
		map<int,int> mp;
		int n;
		std::cin>>n;
		vector<int> a,b,c;
		set<int> A,B,C;
		set<int>::iterator it;
		for(int i=0;i<n;i++)
		{
			cin>>x;
			mp[x]++;
			a.push_back(x);
		}
		cin>>n;
		for(int i=0;i<n;i++)
		{
			cin>>x;
			mp[x]++;
			b.push_back(x);
		}
		cin>>n;
		for(int i=0;i<n;i++)
		{
			cin>>x;
			mp[x]++;
			c.push_back(x);
		}
		for(int i=0;i<a.size();i++)
		{
			if(mp[a[i]]==1)
			A.insert(a[i]);
		}
		for(int i=0;i<b.size();i++)
		{
			if(mp[b[i]]==1)
			B.insert(b[i]);
		}
		for(int i=0;i<c.size();i++)
		{
			if(mp[c[i]]==1)
			C.insert(c[i]);
		}
		printf("Case #%d:\n",I++);
		int mx=max(A.size(),max(B.size(),C.size()));
		if(A.size()==mx)
		{
			cout<<1<<" "<<A.size();
			it=A.begin();
			for(int i=0;i<mx;i++,it++)
			{
				cout<<" "<<*it;
			}
			cout<<'\n';
		}
		if(B.size()==mx)
		{
			cout<<2<<" "<<B.size();it=B.begin();
			for(int i=0;i<mx;i++,it++)
			{
				cout<<" "<<*it;
			}
			cout<<'\n';
		}
		if(C.size()==mx)
		{
			cout<<3<<" "<<C.size();it=C.begin();
			for(int i=0;i<mx;i++,it++)
			{
				cout<<" "<<*it;
			}
			cout<<'\n';
		}
    }   
   return 0;
}
